name: Blue-Green Deployment

# 언제 실행할지 (main 브랜치에 푸시하면 실행)
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# 실행할 작업들
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1단계: 코드 가져오기
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      # 2단계: Java 17 설정
      - name: ☕ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3단계: Gradle 캐시 설정 (빌드 속도 향상)
      - name: 📦 Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4단계: Gradle 실행 권한 부여
      - name: 🔑 Grant execute permission for gradlew
        run: chmod +x gradlew

      # 5단계: 스프링 부트 애플리케이션 빌드
      - name: 🏗️ Build Spring Boot Application
        run: ./gradlew clean build

      # 6단계: 빌드 결과 확인
      - name: 📋 List build artifacts
        run: ls -la build/libs/

      # 7단계: Docker 이미지 빌드
      - name: 🐳 Build Docker Image
        run: |
          # 커밋 해시를 태그로 사용
          COMMIT_SHA=${{ github.sha }}
          SHORT_SHA=${COMMIT_SHA:0:7}
          
          echo "Building Docker image with tag: blue-green-demo:$SHORT_SHA"
          docker build -t blue-green-demo:$SHORT_SHA .
          docker tag blue-green-demo:$SHORT_SHA blue-green-demo:latest

      # 8단계: Docker 이미지 확인
      - name: 📊 Verify Docker Image
        run: |
          echo "Docker images:"
          docker images | grep blue-green-demo
          
          echo "Testing Docker image:"
          docker run --rm -d --name test-container -p 9999:8080 \
            -e APP_VERSION=test \
            -e APP_ENVIRONMENT=ci \
            blue-green-demo:latest
          
          # 컨테이너가 시작될 때까지 대기
          sleep 30
          
          # 헬스체크
          curl -f http://localhost:9999/health || exit 1
          
          # 테스트 컨테이너 정리
          docker stop test-container

      # 9단계: 시뮬레이션된 Blue-Green 배포
      - name: 🔄 Simulate Blue-Green Deployment
        run: |
          echo "=== Blue-Green 배포 시뮬레이션 ==="
          
          # Blue 환경 시작
          echo "Starting Blue environment..."
          docker run -d --name blue-env -p 8081:8080 \
            -e APP_VERSION=1.0 \
            -e APP_ENVIRONMENT=blue \
            blue-green-demo:latest
          
          # Green 환경 시작  
          echo "Starting Green environment..."
          docker run -d --name green-env -p 8082:8080 \
            -e APP_VERSION=2.0 \
            -e APP_ENVIRONMENT=green \
            blue-green-demo:latest
          
          # 환경들이 시작될 때까지 대기
          sleep 30
          
          # 헬스체크
          echo "Health checking Blue environment:"
          curl http://localhost:8081/health
          
          echo "Health checking Green environment:"
          curl http://localhost:8082/health
          
          echo "✅ Blue-Green environments are ready!"

      # 10단계: 정리
      - name: 🧹 Cleanup
        if: always()
        run: |
          echo "Cleaning up containers..."
          docker stop $(docker ps -q) 2>/dev/null || true
          docker rm $(docker ps -aq) 2>/dev/null || true